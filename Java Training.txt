package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in); // basic operation
		String a=sc.next();
		System.out.println(a);
		int b= Integer.parseInt(a);
		System.out.println(b);
		System.out.println(++b);
		System.out.println(b++);
		int c=sc.nextInt();
		int e = b>>2;
		System.out.println(e);
		int d=c<<2;
		System.out.println(d);
		System.out.println(e+d);
		int a1=20,a2=10; //swap of number
		a1=a1+a2;
		a2=a1-a2;
		a1=a1-a2;
		System.out.println(a1);
		System.out.println(a2);
	}

}

2. Area and Perimeter of rectangle

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int l=sc.nextInt();
		float b=sc.nextFloat();
		System.out.println("Area="+l*b);
		System.out.println("Perimeter="+2*(l+b));
	}

}

3. Odd or Even using condition statements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		if(n%2==0) {
			System.out.println(+n+" is a Even number");
		}
		else {
			System.out.println(+n+" is a Odd number");
		}
	}
}

4. Biggest among three numbers

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		int b=sc.nextInt();
		int c=sc.nextInt();
		System.out.println("a="+a);
		System.out.println("b="+b);
		System.out.println("c="+c);
		if((a>=b)&&(a>=c)) {
			System.out.println(+a+" a is a big number");
		}
		else if(b>=c){
			System.out.println(+b+" b is a big number");
		}
		else {
			System.out.println(+c+" c is a big number");
		}
	}
}

5.Age and Weight using nested if

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int age=sc.nextInt();
		int weight=sc.nextInt();
		System.out.println("Age="+age);
		System.out.println("Weight="+weight);
		if((age>20)&&(weight>45)) {
			if(weight<100) {
			    System.out.println("You can Jump");
			}
			else {
				System.out.println("You need extra ropes");
			}
		}
		else {
			System.out.println("You can't allowed to jump");
		}
	}
}

6. Mathematical operations

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		char c=sc.next().charAt(0);
		int a=sc.nextInt();
		int b=sc.nextInt();
		switch(c) {
		case '+':
			System.out.println("Add= "+(a+b));
			break;
		case '-':
			System.out.println("Sub= "+(a-b));
			break;
		case '*':
			System.out.println("Mul= "+(a*b));
			break;
		case '/':
			System.out.println("Div= "+(a/b));
			break;
		default:
			System.out.println("Invalid Value");
		}
	}
}

7.Factorial

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		int fact=1;
		for(int i=2;i<=a;i++) {
			fact = fact*i;
		}
		System.out.println(fact);
	}
}

8.Sum of digits

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		int n=1457;
		int res=0;
		for(;n>0;n/=10){
            res+=n%10;
        }
		System.out.println("Sum of digits: "+res);
	}
}

9.Prime or not

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		int n=13;
		int flag=0;
		for(int i=2;i<n;i++) {
			if(n%i==0) {
				System.out.println("Not a prime");
				flag++;
				break;
			}
		}
		if(flag==0)
		{
				System.out.println("prime");
		}
	}
}

10.Print 1 to 50 if the k multiples is found immediately break

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int k=sc.nextInt();
		for(int i=1;i<50;i++) {
			if(i%k==0) {
				break;
			}
			else {
				System.out.println(i);
			}
		}
	}
}

11. Print 1 to 100 if 3 multiples it print Fizz if 5 multiples it print Buzz if for both multiples it print Fizz

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		for(int i=1;i<=100;i++) {
			if((i%3==0)&&(i%5==0)) {
				System.out.println("FizzBuzz");
			}
			else if(i%5==0) {
				System.out.println("Buzz");
			}
			else if(i%3==0) {
				System.out.println("Fizz");
			}
			else {
				System.out.println(i);
			}
		}
	}
}

12.Armstrong or not

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int rem,sum=0;
		int m=n;
		while(n>0) {
			rem=n%10;
			sum=sum+(rem*rem*rem);
			n=n/10;
		}
		if(sum==m) {
			System.out.println("Armstrong number");
		}
		else {
			System.out.println("Not a Armstrong number");
		}
	}
}

13.Leap year or not

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		if((n%4==0)||(n%400==0)&&(n%100!=0)) {
			System.out.println("Leap year");
		}
		else {
			System.out.println("Not a Leap year");
		}
	}
}

14. Smallest among four numbers

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		int b=sc.nextInt();
		int c=sc.nextInt();
		int d=sc.nextInt();
		if((a<b)&&(a<c)&&(a<d)) {
			System.out.println("a is small");
		}
		else if((b<c)&&(b<d)){
			System.out.println("b is small");
		}
		else if(c<d) {
			System.out.println("c is small");
		}
		else {
			System.out.println("d is small");
		}
	}
}

15.Chcek whether the given input is digit or alphabet or special

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		char a=sc.next().charAt(0);
		if((a>='0')&&(a<='9')) {
			System.out.println("digit");
		}
		else if((a>='a')&&(a<='z')||(a>='A')&&(a<='Z')){
			System.out.println("alphabet");
		}
		else {
			System.out.println("special");
		}
	}
}

16.Print the pattern
* * * * * 
* * * * * 
* * * * * 
* * * * * 
* * * * * 

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		for(int i=1;i<=5;i++) {
			for(int j=1;j<=5;j++) {
				System.out.print("* ");
			}
			System.out.print("\n");
		}
	}
}

17. Print the pattern
* * * * *
*       *
*       *
*       *
* * * * *

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				if(i==0 || i==n-1||j==0 || j==n-1) {
				    System.out.print("* ");
				}
				else {
					System.out.print("  "); 
				}
			}
			System.out.print("\n");
		}
	}
}

18. Print the pattern
1 1 1 1 1 
2 2 2 2 2 
3 3 3 3 3 
4 4 4 4 4 
5 5 5 5 5 

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=n;j++) {
				System.out.print(i+" ");
			}
			System.out.print("\n");
		}
	}
}

19.Print the pattern
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=n;j++) {
				System.out.print(j +" ");
			}
			System.out.print("\n");
		}
	}
}

20.Print the pattern
* 
* * 
* * * 
* * * * 
* * * * * 

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=i;j++) {
				System.out.print("*"+" ");
			}
			System.out.print("\n");
		}
	}
}

21.Print the array element

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]= sc.nextInt();
		}
		for(int i=0;i<n;i++) {
				System.out.println(arr[i]);
		}
		System.out.print(Arrays.toString(arr));
	}
}

22.Smallest among array elements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int min=arr[0];
		for(int i=0;i<n;i++) {
			if(arr[i]<min) {
			  min=arr[i];
			}
		}
		System.out.println(min + " is a small");
	}
}

23.Biggest among array elements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int max=arr[0];
		for(int i=0;i<n;i++) {
			if(arr[i]>max) {
			  max=arr[i];
			}
		}
		System.out.println(max + " is a big");
	}
}
24 Sum of array elements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int sum=0;
		for(int i=0;i<n;i++) {
			sum= sum+arr[i];
		}
		System.out.println(sum);
	}
}

25.Reverse the array elements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		for(int i=n-1;i>=0;i--) {
			System.out.print(arr[i]);
		}
	}
}

26.Give an array elements with 0 also and that 0 are print on end like 56 0 0 0 89
56 89 0 0 0 

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int in=0;
		for(int i=0;i<n;i++) {
			if(arr[i]!=0) {
				 arr[in++]=arr[i];
			}
		}
		if(in<n) {
			for(int i=in;i<n;i++) {
				arr[i]=0;
			}
		}
		for(int i=0;i<n;i++) {
			System.out.print(arr[i]+" ");
		}
	}
}

27. Print in that even place of array become 1,2,3... odd places become 0

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		 Scanner sc=new Scanner(System.in);
	       int n=sc.nextInt();
	       for(int i=1;i<=n;i++){
	            System.out.print("0 " + i + " ");
	    }
	}
}

28.There are n number of bulbs.for the 1st round toggle the entire bulb to turn on,for the 2nd round multiples of 2 to be toggle,for the 3rd time multiple of 3 to be toggle like that upto the n number of bulb 
(Note: Here the logic is atlast the square number of the bulb has been true that is turn on for eg, if i give input 25 it includes the (1,4,9,16,25) four number of squares so output is 5
package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		 Scanner sc=new Scanner(System.in);
		 int n=sc.nextInt();
	     boolean[] arr=new boolean[n];
	     int count=0;
	     for(int i=1;i<=n;i++) {
	    	 for(int j=i;j<=n;j=j+i) {
	    		 if(arr[j-1]==false) {
	    			 arr[j-1]=true;
	    		 }
	    		 else {
	    			 arr[j-1]=false;
	    		 }
	    	 }
	     }
	     for(int i=0;i<n;i++) {
	    	 if(arr[i]==true) {
	    		 count++;                           
	    	 }
	     }
	     System.out.println(count);
	}
}
(OR)
package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		 Scanner sc=new Scanner(System.in);
		 int n=sc.nextInt();
         System.out.println((int)Math.sqrt(n));
	}
}

29.Second maximum from array elements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int max=Integer.MIN_VALUE;
		int a=Integer.MIN_VALUE;
		for(int i=0;i<n;i++) {
			if(arr[i]>max && arr[i]>a) {
				a=max;
				max=arr[i];
			}
			else if(arr[i]>a&& arr[i]!=max) {

				a=arr[i];
			}
		}
		System.out.println(a+ " is a second big");
	}
}

30.Second minimum from array element

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int min=Integer.MAX_VALUE;
		int a=Integer.MAX_VALUE;
		for(int i=0;i<n;i++) {
			if(arr[i]<min && arr[i]<a) {
				a=min;
				min=arr[i];
			}
			else if(arr[i]<a&& arr[i]!=min) {

				a=arr[i];
			}
		}
		System.out.println(a+ " is a second small number");
	}
}

31.A shopkeeper have n number of customers.he started the business daily with Rs.0.A any product in the shop must be Rs.30. He have only denominations are 30,60,120. 
Input like 
5
30 30 60 60 30
Output
Transcation Successful

package PSR;
import java.util.*;
public class Hello {
	static boolean check(int arr[],int n) {
		int c30=0,c60=0,c120=0;
		for(int i=0;i<n;i++) {
			if(arr[i]==30) {
				c30++;
			}
			else if(arr[i]==60) {
				if(c30>0) {
					c30--;
				}
				else {
					return false;
				}
				c60++;
			}
			else if(arr[i]==120) {
				if(c60>0&&c30>0) {
					c30--;
					c60--;
				}
				else if(c30>=3){
					c30=c30-3;
				}
				else {
					return false;
				}
				c120++;
			}
		}
		return true;
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		if(check(arr,n)) {
			System.out.println("Transcation Successful");
		}
		else {
			System.out.println("Transcation Failed");
		}
	}
}

32.Copying the one array into another array using clone() method

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
		}
		int[] ar2;
		ar2=arr.clone();
		System.out.print(Arrays.toString(ar2));
	}
}

33. Print the 2d array elements

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int m=sc.nextInt(); 
		int[][] arr=new int[n][m];
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
			arr[i][j]=sc.nextInt();
		}
		}
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
			System.out.print(arr[i][j]);
		}
			System.out.print("\n");	
		}
	}
}

34. Print the ed array element like
1 2 3 
4 5 6 7
8 9

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt(); 
		int[][] arr=new int[n][];
		arr[0]=new int[3];  //Jagged array
		arr[1]=new int[4];
		arr[2]=new int[2];
		for(int i=0;i<n;i++) {
			for(int j=0;j<arr[i].length;j++) {
			arr[i][j]=sc.nextInt();
		}
		}
		for(int i=0;i<n;i++) {
			for(int j=0;j<arr[i].length;j++) {
			System.out.print(arr[i][j]+" ");
		}
			System.out.print("\n");	
		}
	}
}

35. String Operations

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		String str1=new String("Hello"); //declaration using new
		String str2=new String("Hello");
		String str3="Hello"; // declaration static
		String str4="Hello CSE";
		String str5="HELLO";
		System.out.println(str1==str2); //check equals of two new declaration
		System.out.println(str4==str3); //check equals of two static declaration
		System.out.println(str4.equals(str3)); //check equals of two objects
        System.out.println(str1.hashCode()); 
        System.out.println(str2.hashCode());
        System.out.println(str3.hashCode());
        System.out.println(str3.length()); 
        System.out.println(str3.concat("Welcome"));
        System.out.println(str3.toUpperCase());
        System.out.println(str3.toLowerCase());
        System.out.println(str3.charAt(str3.length()-1)=='o'); //check the string end with o char
        System.out.println(str4.endsWith("CSE")); //check if the string end with existing string
        System.out.println(str4.substring(6)); //print str4 from the index value of 6
        System.out.println(str4.contains("CSE")); //if the word CSE is there in str4 it returns true
        System.out.println(str3.equals(str5)); // check if one is lowercase and one is uppercase
        System.out.println(str3.equalsIgnoreCase(str5)); //ignore the case and check
	}
}

36. Reverse the string and chcek palindrome

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str1=sc.nextLine();
		String str2=" ";
		for(int i=0;i<str1.length();i++) {
			str2=str1.charAt(i)+str2;
		}
		System.out.println(str2);
		if(str1.equals(str2)) {
			System.out.println("Palindrome");
		}
	}
}

37. Check whether the str2 is placed on str1 using contains() method

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str1=sc.nextLine();
		String str2=sc.nextLine();
		System.out.println(str1.contains(str2));
	}
}

38. Concat the str1 and str2 based on user position
like
hello java
welcome
6
hello welcomejava

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str1=sc.nextLine();
		String str2=sc.nextLine();
		int position=sc.nextInt();
		String res="";
		for(int i=0;i<position;i++) {
			res=res+str1.charAt(i);
		}
		res=res+str2;
		for(int i=position;i<str1.length();i++) {
			res=res+str1.charAt(i);
		}
		System.out.println(res);
	}
}
(OR)
package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str1=sc.nextLine();
		String str2=sc.nextLine();
		int position=sc.nextInt();
		String res=str1.substring(0,position)+str2+str1.substring(position);
		System.out.println(res);
	}
}

39. StringBuffer operations

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		/*StringBuilder sb=new StringBuilder("Hello");
		StringBuilder sb1=new StringBuilder("Hello");
		System.out.println(sb);
		for(int i=0;i<5;i++) {
			sb.append("Abc ");
			System.out.println(sb);
			System.out.println(sb.hashCode());
		}
		if(sb.equals(sb1)) {
			System.out.println("same");
		}
		
		System.out.println(sb.toString()+"world");
		System.out.println(sb.append("world"));
		System.out.println(sb.reverse().toString());*/
		StringBuffer sb=new StringBuffer("GoodMorningAll");
		System.out.println(sb.deleteCharAt(7));
		System.out.println(sb.capacity());
		
	}
}                     

40. Goku playing a game,
35
3
5 9 6
Number of variants to be killed: 3
Yes, Goku Won Go to the next level

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int b=sc.nextInt();
		int n=sc.nextInt();
		int[] zi=new int[n];
		int res=0,count=0;
		for(int i=0;i<zi.length;i++) {
			zi[i]=sc.nextInt();
		}
		for(int i=0;i<zi.length;i++) {
			res= (zi[i]%2+zi[i]/2);
			b-=res;
			count++;			
		}
		System.out.println("Number of variants to be killed: "+count);
		if(count==n) {
			System.out.println("Yes, Goku Won Go to the next level");
		}
		else {
			System.out.println("No, Goku lose Cant Go to the next level");
		}
	}
} 

41.Print a string if EF or G is placed an string then it will delete EF and G and print string
236EF5778G
2365778

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str=sc.nextLine();
		String str1="EF",str2="G";
		String res= str.replace(str1,"").replace(str2,"");
		System.out.println(res);
	}
}                           
(OR)
package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str=sc.nextLine();
		String res="";
		for(int i=0;i<str.length();) {
			if(i+1<str.length()&&str.charAt(i)=='E'&&str.charAt(i+1)=='F'){
				i+=2;
			}
			else if(str.charAt(i)=='G'){
				i+=1;
			}
			else {
				res=res+str.charAt(i);
				i+=1;
			}
		}
		System.out.print(res);
	}
}                     

42. Give a one string like PSR--PSR--CAT--DOG- like it produce -------PSRPSRCATDOG

package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String s=sc.nextLine();
		int count=0;
	    String res="";
		for(int i=0;i<s.length();i++){
	        if(s.charAt(i)=='-'){
	            count++;
	        }
	        else{
	            res=res+s.charAt(i);
	        }
	    }
	    for(int i=0;i<count;i++){
	        res='-'+res;
	    }
	  System.out.println(res);
	}
}                      
(OR)
package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str=sc.nextLine();
		char[] c =str.toCharArray();
		int n=c.length-1;
		for(int i=n-1;i>=0;i--) {
			if(c[i]!='-') {
				char temp=c[n];
				c[n]=c[i];
				c[i]=temp;
				n--;
			}
		}
		System.out.print(Arrays.toString(c));
	}
}                     
(OR)
package PSR;
import java.util.*;
public class Hello {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String s=sc.nextLine();
		int count =s.length()-s.replace("-","").length();
		String new_str = "-".repeat(count)+s.replace("-","");
		System.out.println(new_str);
	}
}           

43. To find the GCD based on Euclids algorithm

package PSR;
import java.util.*;
public class Hello {
	static int gcd(int a,int b) {
		if(b==0) {
			return a;
		}
		return gcd(b,a%b);
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		int b=sc.nextInt();
		System.out.println(gcd(a,b));
	}
}                     

44. To print the fibonacci series using recursion

package PSR;
import java.util.*;
public class Hello {
	static int fibo(int n) {
		if(n==0 || n==1) {
			return n;
		}
		else {
		    return fibo(n-1)+fibo(n-2);
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
                for(int i=0;i<n;i++) {
			System.out.print(fibo(i));
		}
	}
}  

45. To print the factorial using recursion

package PSR;
import java.util.*;
public class Hello {
	static int fact(int n) {
		if(n<=1) {
			return 1;
		}
		else {
			return n*fact(n-1);
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		System.out.print(fact(n));
	}
}    //Input:5 Output:120                         
(OR)
package PSR;
import java.util.*;
public class Hello {
	static int fact(int n) {
		if(n<=1) {
			return 1;
		}
		else {
			return n*fact(n-1);
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		for(int i=0;i<=n;i++) {
		    System.out.print(fact(i));
		}
	}
}     //Input:5 Output:1 1 2 6 24 120        

46. To find a Combination for pencil and erasers

package PSR;
import java.util.*;
public class Hello {
	static int Combination(int n,int p,int m,int e) {
		int penciltotal= fact(n)/(fact(p)*fact(n-p));
		int erasertotal=fact(m)/(fact(e)*fact(m-e));
		return penciltotal*erasertotal;
	}
	static int fact(int n) {
		if(n<=1) {
			return 1;
		}
		else {
			return n*fact(n-1);
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int p=sc.nextInt();
		int m=sc.nextInt();
		int e=sc.nextInt();
		System.out.println(Combination(n,p,m,e));
	}
} 

47. There are N number of players in circle format. The third person to be kill on each round. Then what will be the position of the safer player?

package PSR;
import java.util.*;
public class Hello {
	static int kill(int n,int k) {
		if(n==1) {
			return 0;
		}
		else {
			return ((kill(n-1,k)+k)%n);
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int k=sc.nextInt();
		System.out.print(kill(n,k)+1);
	}
} 

48. Minimum Deletions to Make Array Divisible(Leetcode:2344)

class Solution {
    static int gcd(int a,int b) {
		if(b==0) {
			return a;
		}
		return gcd(b,a%b);
    }
    public int minOperations(int[] nums, int[] numsDivide) {
        Arrays.sort(nums);
        int gcd= numsDivide[0];
        for(int i=1;i<numsDivide.length;i++){
            gcd= gcd(gcd,numsDivide[i]);
        }
        for(int i=0;i<nums.length;i++){
            if(gcd%nums[i]==0){
                return i;
            }
        }
        return -1;
    }
}

49.Minimum Garden Perimeter to Collect Enough Apples(Leetcode:1954) 

class Solution {
    public long minimumPerimeter(long neededApples) {
        long n=0;
        long totalApples=0;
        while(neededApples>totalApples){
            n++;
            totalApples=totalApples+(12*n*n);
        }
        return 8*n;
    }
}

50.Constructor

package PSR;
import java.util.*;
public class Car{
	    static int wheels=4; //static variable
		String brand="BMW";
		static String color;  // instance variable
		final int speed=100; //can't change the value
		int price;
		Car(){          //default constructor
			
		}
		Car(String brand,String color){  //parameterized constructor
			this.brand=brand;
			this.color=color;
		}
		static void run() {
			System.out.println("Car is Running");
		}
		void start() {
			System.out.println("Car is Start");
		}
		void stop() {
			System.out.println("Car is Stop");
		}
		void currentspeed(int s) {
			int maxspeed=s; //local variable
			System.out.println(maxspeed);
		}
		static void curspeed(int s) {
			int maxspeed=s; //local variable
			System.out.println(maxspeed);
		}
	public static void main(String[] args) {
		Car obj1=new Car();
		obj1.brand="VM";
		System.out.println(obj1 .brand);
		Car obj=new Car("Benz","Black");
		System.out.println(obj.brand);
		System.out.println(color);
		obj.start(); //it is not static so we need object
		obj.stop(); //it is not static
		Car.run(); //run() static
		run(); //without class name also work
		Car obj2=new Car("Audi","Red");
		System.out.println(obj2.brand);
		System.out.println(color);
		obj2.currentspeed(150);
		curspeed(100);  //static method calling
	}
} 



51. Create a class take three variables(instance static local)two methods(instance static) access all those methods in main method

package PSR;
public class Student {
	int stu_id;
	String stu_name="Sivaranjani";
	static String dept="CSE";
	int marks;
	Student(){
		
	}
	Student(int stu_id){
		System.out.println("StudenId = "+stu_id+ "," +"StudentName = "+stu_name);
	}
	void average(int marks,String stu_name) {
		if(marks>50) {
			System.out.println(stu_name +" is pass");
		}
		else {
			System.out.println(stu_name +" is fail");
		}
	}
	public static void main(String[] args) {
		Student obj=new Student();
        System.out.println(obj.dept);
        Student obj1=new Student(1);
        obj1.average(48,obj1.stu_name);
        Student obj2=new Student();
	}
}

52. Using getter and setter method

package PSR;
class Variables {
	public int name=10; //public variable
	private int password=20; //private variable
	protected int id=30; //protected variable
	public void setValue(int v) {  //setter
		password=v;
	}
	public int getValue() {  //getter
		return password;
	}
	public void show() {
		System.out.println(name);
		System.out.println(password);
		System.out.println(id);
	}
}
class Access{
	public static void main(String[] args) {
		Variables obj=new Variables();
        obj.show();
        obj.setValue(100);
        obj.show();
	}
}

53. Single Inheritance

package PSR;
class Instagram {
	public void chat() {
		System.out.println("Chatting");
	}
	public void post() {
		System.out.println("posting");
	}
}
class B extends Instagram{
	public void audio() {
		System.out.println("Audio call");
	}
	public void video() {
		System.out.println("Video call");
	}
}
class main{
	public static void main(String[] args) {
		B obj=new B();
		obj.chat();
		obj.post();
		obj.audio();
		obj.video();
	}
}

54. Multilevel Inheritance

package PSR;
class Instagram {
	public void chat() {
		System.out.println("Chatting");
	}
	public void post() {
		System.out.println("posting");
	}
}
class B extends Instagram{
	public void audio() {
		System.out.println("Audio call");
	}
	public void video() {
		System.out.println("Video call");
	}
}
class C extends B{
	public void story() {
		System.out.println("Story Upload");
	}
	public void reels() {
		System.out.println("Make a reels");
	}
}
class main{
	public static void main(String[] args) {
		C obj=new C();
		obj.chat();
		obj.post();
		obj.audio();
		obj.video();
		obj.story();
		obj.reels();
	}
}

55. Hierarical Inheritance

package PSR;
class Instagram {
	public void chat() {
		System.out.println("Chatting");
	}
	public void post() {
		System.out.println("posting");
	}
}
class B extends Instagram{
	public void audio() {
		System.out.println("Audio call");
	}
	public void video() {
		System.out.println("Video call");
	}
}
class C extends Instagram{
	public void story() {
		System.out.println("Story Upload");
	}
	public void reels() {
		System.out.println("Make a reels");
	}
}
class main{
	public static void main(String[] args) {
		B obj1=new B();
		obj1.chat();
		obj1.post();
		obj1.audio();
		obj1.video();
		C obj=new C();
		obj.chat();
		obj.post();
		obj.story();
		obj.reels();
	}
}

60. Multiple Inheritance using interface

package PSR;
interface A {
	abstract void call();
}
interface B {
	abstract void chat();
}
class C implements A,B{
	public void call() {
		System.out.println("Calling");
	}
	public void chat() {
		System.out.println("Chatting");
	}
	String s="Name";
}
class main{
	public static void main(String[] args) {
		C obj1=new C();
		obj1.call();
		obj1.chat();
	}
}

61. Strobogrammatic number or not

package PSR;
import java.util.*;
public class Strobogrammatic {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String s=sc.nextLine();
		HashMap<Character, Character>hm=new HashMap<>();
		hm.put('0', '0');
		hm.put('1', '1');
		hm.put('8', '8');
		hm.put('6', '9');
		hm.put('9', '6');
		int left=0;
		int right=s.length()-1;
		boolean flag=true;
		while(left<=right) {
			if(!hm.containsKey(s.charAt(left))) {
				flag=false;
				break;
			}
			else if((hm.get(s.charAt(left))!=s.charAt(right))) {
				flag=false;
				break;
			}
			left++;
			right--;
		}
		if(flag) {
			System.out.println("Strobogrammatic number");
		}
		else {
			System.out.println("Not a Strobogrammatic number");
		}
	}
}

62. Number of Substrings Containing All Three Characters(Leetcode:1358)

class Solution {
    public int numberOfSubstrings(String s) {
        HashMap<Character, Integer>hm=new HashMap<>();
        int count=0;
        int start=0;
        int end=0;
        int n=s.length();
        while(end<n){
		    hm.put(s.charAt(end),hm.getOrDefault(s.charAt(end),0)+1);
            while(hm.getOrDefault('a',0)>0&&hm.getOrDefault('b',0)>0&&hm.getOrDefault('c',0)>0){
                count+=n-end;
                hm.put(s.charAt(start),hm.get(s.charAt(start))-1);
                start++;
            }
            end++;
        }
        return count;
    }
}

63. ArrayList Operations

package PSR;
import java.util.*;
public class Hello{
   public static void main(String[] args) {
         List<String> wrestlers=new ArrayList<>();
         wrestlers.add("Jhon cena"); //add strings to arraylist
         wrestlers.add("RKO");
         wrestlers.add("Batista");
         System.out.println(wrestlers); 
         System.out.println(wrestlers.size()); //print the size of arraylist
         System.out.println(wrestlers.isEmpty()); //check whether the arraylist is empty or not
         wrestlers.remove(1); //remove the string from arraylist based on index value
         System.out.println(wrestlers);
         System.out.println(wrestlers.contains("Batista")); //check whether the string is present or not
   } 
}

64. Give one array and to find the leader from an array. The leader become greater than the right of the array elements
Input: 
6
1 12 75 84 22 6
Output:
[84,22,6]

package PSR;
import java.util.*;
public class Hello{
	public static void leader(int[] arr,int n) {
		List<Integer> list=new ArrayList<>();
		int leader=arr[n-1];
		list.add(leader);
		for(int i=n-2;i>=0;i--) {
			if(arr[i]>leader) {
				leader=arr[i];
				list.add(0,arr[i]);
			}
		}
		System.out.print(list);
	}
   public static void main(String[] args) {
         Scanner sc=new Scanner(System.in);
         int n=sc.nextInt();
         int[] arr=new int[n];
         for(int i=0;i<n;i++) {
        	 arr[i]=sc.nextInt();
         }
         leader(arr,n);
   } 
}

65. Singly Linked List Inserting the Node(element)

package PSR;
class Node {
	int data;
	Node next;
	Node(int data){
		this.data=data;
		this.next=null;
	}
}
class LinkedList{
	Node head;
	void add(int data) {
		Node newnode=new Node(data);
		if(head==null) {
			head=newnode;
		}
		else {
			Node temp=head;
			while(temp.next!=null) {
				temp=temp.next;
			}
			temp.next=newnode;
		}
	}
	void insertatbegin(int data) {
		Node newnode=new Node(data);
		newnode.next=head;
		head=newnode;
	}
	void print() {
		Node temp=head;
		while(temp!=null) {
			System.out.print(temp.data+"--->");
			temp=temp.next;
		}
		System.out.print("null");
	}
}
public class Hello{
	public static void main(String[] args) {
		LinkedList list=new LinkedList();
		list.add(10);
		list.add(20);
		list.add(30);
		list.add(40);
		list.insertatbegin(60);
		list.print();
	}
} 

65. Singly Linked List Finding the inder of the Node(element)

package PSR;
class Node {
	int data;
	Node next;
	Node(int data){
		this.data=data;
		this.next=null;
	}
}
class LinkedList{
	Node head;
	void add(int data) {
		Node newnode=new Node(data);
		if(head==null) {
			head=newnode;
		}
		else {
			Node temp=head;
			while(temp.next!=null) {
				temp=temp.next;
			}
			temp.next=newnode;
		}
	}
	void insertatbegin(int data) {
		Node newnode=new Node(data);
		newnode.next=head;
		head=newnode;
	}
	void find(int data) {
		int count=0;
		Node temp=head;
		while(temp!=null) {
			if(temp.data!=data) {
				count++;
				temp=temp.next;
			}
			else {
				break;
			}
		}
		System.out.println(count);
	}
	void print() {
		Node temp=head;
		while(temp!=null) {
			System.out.print(temp.data+"--->");
			temp=temp.next;
		}
		System.out.print("null");
	}
}
public class Hello{
	public static void main(String[] args) {
		LinkedList list=new LinkedList();
		list.add(10);
		list.add(20);
		list.add(30);
		list.add(40);
		list.insertatbegin(60);
		list.find(30);
		list.print();
	}
} 

66. Linked List Cycle(Leetcode:141)

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null||head.next==null){
            return false;
        }
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null&&fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                return true;
            }
        }
        return  false;
    }
}

67.Merge Two Sorted Lists(Leetcode:21)

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
      ListNode res=new ListNode();
      ListNode head=res;
      while(list1!=null&&list2!=null){
        if(list1.val<=list2.val){
            res.next=list1;
            list1=list1.next;
        }
        else{
            res.next=list2;
            list2=list2.next;
        }
        res=res.next;
      }
      if(list1!=null){
        res.next=list1;
      }
      else{
        res.next=list2;
      }
      return head.next;
    }
}

68.Odd Even Linked List(Leetcode:328)

class Solution {
    public ListNode oddEvenList(ListNode head) {
       if(head==null||head.next==null){
         return head;
       }
       ListNode odd=head;
       ListNode even=head.next;
       ListNode evenhead=even;
       while(even!=null && even.next!=null){
        odd.next=even.next;
        odd=odd.next;
        even.next=odd.next;
        even=even.next;
       }
       odd.next=evenhead;
       return head;
    }
}

69. Rotate List(Leetcode:61)

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null||head.next==null||k==0){
            return head;
        }
        ListNode temp=head;
        int length=1;
        while(temp.next!=null) {
			temp=temp.next;
            length++;
		}
        temp.next=head;
        k=k%length;
        k=length-k;
        while(k>0){
           temp=temp.next;
           k--;
        }
        head=temp.next;
        temp.next=null;
        return head;
    }
}

70. Reverse Linked List (Leetcode:206)

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode current=head;
        ListNode previous=null;
        ListNode next=null;
        while(current!=null){
            next=current.next;
            current.next=previous;
            previous=current;
            current=next;
        }
        return previous;
    }
}

71. Palindrome Linked List(Leetcode:234)

class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null||head.next==null){
            return true;
        }
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null&&fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode secondhalf=slow.next;
        slow.next=null;
        ListNode current=secondhalf;
        ListNode previous=null;
        ListNode next=null;
        while(current!=null){
            next=current.next;
            current.next=previous;
            previous=current;
            current=next;
        }
        ListNode p1=head;
        ListNode p2=previous;
        while(p2!=null){
            if(p1.val!=p2.val){
                return false;
            }
            p1=p1.next;
            p2=p2.next;
        }
        return true;
    }
}

72.Reorder List(Leetcode:143)

class Solution {
    public void reorderList(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null&&fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode secondhalf=slow.next;
        slow.next=null;
        ListNode current=secondhalf;
        ListNode previous=null;
        ListNode next=null;
        while(current!=null){
            next=current.next;
            current.next=previous;
            previous=current;
            current=next;
        }
        ListNode firsthalf=head;
        secondhalf=previous;
        ListNode temp1,temp2;
        while(secondhalf!=null){
           temp1=firsthalf.next;
           temp2=secondhalf.next;
           firsthalf.next=secondhalf;
           secondhalf.next=temp1;
           firsthalf=temp1;
           secondhalf=temp2;
        }
    }
}

73.Doubly Linked List 

package PSR;
class Node {
	int data;
	Node next;
	Node prev;
	Node tail;
	Node(int data){
		this.data=data;
		this.next=null;
		this.prev=null;
		this.tail=null;
	}
}
class DoublyLinkedList{
	Node head;
	Node tail;
	void add(int data) {
		Node newnode=new Node(data);
		if(head==null) {
			head=newnode;
		}
		else {
			Node temp=head;
			while(temp.next!=null) {
			   temp=temp.next;
			}
			temp.next=newnode;
			newnode.prev=temp;
			tail=newnode;
		}
	}
	void printForward() {
	    System.out.println("Forward Traversal of Doubly Linked List");
		Node temp=head;
		while(temp!=null) {
			System.out.print(temp.data+"--->");
			temp=temp.next;
		}
		System.out.println();
	}
	void printBackward() {
	    System.out.println("Backward Traversal of Doubly Linked List");
		Node temp=tail;
		while(temp!=null) {
			System.out.print(temp.data+"--->");
			temp=temp.prev;
		}
	}
}
public class Hello
{
	public static void main(String[] args) 
	{
	DoublyLinkedList dll=new DoublyLinkedList();
	dll.add(10);
	dll.add(20);
	dll.add(30);
	dll.add(40);
	dll.printForward();
	dll.printBackward();
	}
}

74. Add Two Numbers(Leetcode:2)

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res=new ListNode();
        ListNode current=res;
        ListNode temp1=l1;
        ListNode temp2=l2;
        int carry=0;
        while(temp1!=null||temp2!=null||carry>0){
            int sum=carry;
            if(temp1!=null){
                sum+=temp1.val;
                temp1=temp1.next;
            }
            if(temp2!=null){
                sum+=temp2.val;
                temp2=temp2.next;
            }
            ListNode newnode=new ListNode(sum%10);
            carry=sum/10;
            current.next=newnode;
            current=current.next;
        }
        return res.next;
    }
}

75. Stcak Operations

package PSR;
class Stack {
	int[] arr;
	int capacity;
	int top;
	Stack(int capacity){
		this.capacity=capacity;
		this.arr=new int[capacity];
		this.top=-1;
	}
	void push(int data) {
		if(isFull()) {
			System.out.println("Element cannot be added stack is full");
		}
		else {
			arr[++top]=data;
		}
	}
	int pop() {
		if(isEmpty()) {
			System.out.println("Stack is empty");
			return -1;
		}
		else {
			return arr[top--];
		}
	}
	int peak() {
		if(isEmpty()) {
			System.out.println("Stack is empty");
			return -1;
		}
		else {
			return arr[top];
		}
	}
	boolean isEmpty() {
		return top==-1;
	}
	boolean isFull() {
		return capacity-1==top;
	}
}
public class Hello
{
	public static void main(String[] args) 
	{
	  Stack st=new Stack(5);
	  st.push(10);
	  st.push(20);
	  st.push(30);
	  st.push(40);
	  st.push(50);
	  System.out.println(st.pop());
	  System.out.println(st.pop());
	  st.push(60);
	  System.out.println(st.isEmpty());
	  System.out.println(st.isFull());
	  System.out.println(st.top);
	  System.out.println(st.capacity);
	}
}
